BRUTE FORCE
-----------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int diameter = 0;
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;
        int lh = height(root->left);
        int rh = height(root->right);

        int currentDiameter = lh + rh ;
        diameter = max(diameter,currentDiameter);

        int left = diameterOfBinaryTree(root->left);
        int right = diameterOfBinaryTree(root->right);

        return diameter;
    }

    int height(TreeNode* root){
        if(root == NULL) return 0;

        int lh = height(root->left);
        int rh = height(root->right);

        return 1 + max(lh,rh);
    }
};

TC -> O(N^2)
----------------------------------------------------------

OPTIMISED

class Solution {
public:
   
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        int temp = height(root, diameter);
        return diameter;
    }

    int height(TreeNode* root, int &maxdiameter){
        if(root == NULL) return 0;

        int lh = height(root->left, maxdiameter);
        int rh = height(root->right, maxdiameter);

        int diameter = lh+rh;

        maxdiameter = max(maxdiameter, diameter);

        return 1 + max(lh,rh);
    }
};

O(N)