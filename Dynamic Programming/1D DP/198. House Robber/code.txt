Memoization
-----------------------------------

class Solution {
private:
    int func(vector<int> &nums, vector<int> &dp, int idx){
        //base case
        if(idx==0)
            return nums[idx];
        if(idx<0)
            return 0;

        if(dp[idx]!=-1)
            return dp[idx];

        //pick 
        int pick = nums[idx] + func(nums,dp, idx-2);
        // not pick
        int npick = 0 + func(nums,dp, idx-1);

        return dp[idx]=max(pick, npick);
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> dp(n,-1);
        int ans = func(nums,dp, n-1);
        return ans;
    }
};

---------------------------------

Tabulation
-----------

class Solution {

public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,-1);

        //base condition
        dp[0]=nums[0];

    for(int i=1; i<n; i++){

        int pick = nums[i];
        if(i>1) pick+=dp[i-2];

        int npick = dp[i-1];

        dp[i] = max(pick, npick);
        }
     return dp[n-1];
    }
};